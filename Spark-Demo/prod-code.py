# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %% [markdown]
# ## Gathered Notebook
# 
#  This notebook was generated by an experimental feature called "Gather". The intent is that it contains only the code and cells required to produce the same results as the cell originally selected for gathering. Please note that the Python analysis is quite conservative, so if it is unsure whether a line of code is necessary for execution, it will err on the side of including it.
# 
# **Please let us know if you are satisfied with what was gathered by [taking this survey](https://aka.ms/gathersurvey).**

# %%
from azureml.core import Workspace
workspace = Workspace.from_config()


# %%
from azureml.core import Experiment
experiment = Experiment(workspace, "spark-diabetes-expr")


# %%
from azureml.opendatasets import Diabetes
from sklearn.model_selection import train_test_split
x_df = Diabetes.get_tabular_dataset().to_pandas_dataframe().dropna()
y_df = x_df.pop("Y")
X_train, X_test, y_train, y_test = train_test_split(x_df, y_df, test_size=0.2, random_state=66)


# %%
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error
from sklearn.externals import joblib
import math
alphas = [0.1, 2, 0.3, 4, 0.5, 6, 0.7, 8, 0.9, 1.0]
for alpha in alphas:
    run = experiment.start_logging()
    run.log("alpha_value", alpha)
    print("alpha_value", alpha )
    run = experiment.start_logging()
    model = Ridge(alpha=alpha)
    model.fit(X=X_train, y=y_train)
    y_pred = model.predict(X=X_test)
    rmse = math.sqrt(mean_squared_error(y_true=y_test, y_pred=y_pred))
    print("rmse", rmse)
    model_name = "model_alpha_" + str(alpha) + ".pkl"
    filename = "outputs/" + model_name
    joblib.dump(value=model, filename=filename)


