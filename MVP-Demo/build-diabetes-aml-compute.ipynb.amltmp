{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Copyright (c) Microsoft Corporation. All rights reserved."
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tutorial: Train your first model"
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Connect to Workspace"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# from azureml.core import Workspace\n",
        "# workspace = Workspace.from_config()\n",
        "##Insert Snippet"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1605478163196
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Create an experiment"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# from azureml.core import Experiment\n",
        "# experiment = Experiment(workspace, \"diabetes-expr\")\n",
        "##Insert Snippet"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {
        "gather": {
          "logged": 1605478164586
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Load data and prepare for training"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.opendatasets import Diabetes\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "x_df = Diabetes.get_tabular_dataset().to_pandas_dataframe().dropna()\n",
        "y_df = x_df.pop(\"Y\")\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(x_df, y_df, test_size=0.2, random_state=66)"
      ],
      "outputs": [],
      "execution_count": 3,
      "metadata": {
        "jupyter": {
          "outputs_hidden": false
        },
        "gather": {
          "logged": 1605478179159
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Explore Data"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_df.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 4,
          "data": {
            "text/plain": "   AGE  SEX   BMI     BP   S1     S2    S3   S4      S5  S6\n0   59    2  32.1  101.0  157   93.2  38.0  4.0  4.8598  87\n1   48    1  21.6   87.0  183  103.2  70.0  3.0  3.8918  69\n2   72    2  30.5   93.0  156   93.6  41.0  4.0  4.6728  85\n3   24    1  25.3   84.0  198  131.4  40.0  5.0  4.8903  89\n4   50    1  23.0  101.0  192  125.4  52.0  4.0  4.2905  80",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>AGE</th>\n      <th>SEX</th>\n      <th>BMI</th>\n      <th>BP</th>\n      <th>S1</th>\n      <th>S2</th>\n      <th>S3</th>\n      <th>S4</th>\n      <th>S5</th>\n      <th>S6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>59</td>\n      <td>2</td>\n      <td>32.1</td>\n      <td>101.0</td>\n      <td>157</td>\n      <td>93.2</td>\n      <td>38.0</td>\n      <td>4.0</td>\n      <td>4.8598</td>\n      <td>87</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>48</td>\n      <td>1</td>\n      <td>21.6</td>\n      <td>87.0</td>\n      <td>183</td>\n      <td>103.2</td>\n      <td>70.0</td>\n      <td>3.0</td>\n      <td>3.8918</td>\n      <td>69</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>72</td>\n      <td>2</td>\n      <td>30.5</td>\n      <td>93.0</td>\n      <td>156</td>\n      <td>93.6</td>\n      <td>41.0</td>\n      <td>4.0</td>\n      <td>4.6728</td>\n      <td>85</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>24</td>\n      <td>1</td>\n      <td>25.3</td>\n      <td>84.0</td>\n      <td>198</td>\n      <td>131.4</td>\n      <td>40.0</td>\n      <td>5.0</td>\n      <td>4.8903</td>\n      <td>89</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>50</td>\n      <td>1</td>\n      <td>23.0</td>\n      <td>101.0</td>\n      <td>192</td>\n      <td>125.4</td>\n      <td>52.0</td>\n      <td>4.0</td>\n      <td>4.2905</td>\n      <td>80</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 4,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "outputExpanded": false,
        "gather": {
          "logged": 1605478198505
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(x_df.dtypes)\n",
        "x_df.describe()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AGE      int64\n",
            "SEX      int64\n",
            "BMI    float64\n",
            "BP     float64\n",
            "S1       int64\n",
            "S2     float64\n",
            "S3     float64\n",
            "S4     float64\n",
            "S5     float64\n",
            "S6       int64\n",
            "dtype: object\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 5,
          "data": {
            "text/plain": "              AGE         SEX         BMI          BP          S1          S2  \\\ncount  442.000000  442.000000  442.000000  442.000000  442.000000  442.000000   \nmean    48.518100    1.468326   26.375792   94.647014  189.140271  115.439140   \nstd     13.109028    0.499561    4.418122   13.831283   34.608052   30.413081   \nmin     19.000000    1.000000   18.000000   62.000000   97.000000   41.600000   \n25%     38.250000    1.000000   23.200000   84.000000  164.250000   96.050000   \n50%     50.000000    1.000000   25.700000   93.000000  186.000000  113.000000   \n75%     59.000000    2.000000   29.275000  105.000000  209.750000  134.500000   \nmax     79.000000    2.000000   42.200000  133.000000  301.000000  242.400000   \n\n               S3          S4          S5          S6  \ncount  442.000000  442.000000  442.000000  442.000000  \nmean    49.788462    4.070249    4.641411   91.260181  \nstd     12.934202    1.290450    0.522391   11.496335  \nmin     22.000000    2.000000    3.258100   58.000000  \n25%     40.250000    3.000000    4.276700   83.250000  \n50%     48.000000    4.000000    4.620050   91.000000  \n75%     57.750000    5.000000    4.997200   98.000000  \nmax     99.000000    9.090000    6.107000  124.000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>AGE</th>\n      <th>SEX</th>\n      <th>BMI</th>\n      <th>BP</th>\n      <th>S1</th>\n      <th>S2</th>\n      <th>S3</th>\n      <th>S4</th>\n      <th>S5</th>\n      <th>S6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>442.000000</td>\n      <td>442.000000</td>\n      <td>442.000000</td>\n      <td>442.000000</td>\n      <td>442.000000</td>\n      <td>442.000000</td>\n      <td>442.000000</td>\n      <td>442.000000</td>\n      <td>442.000000</td>\n      <td>442.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>48.518100</td>\n      <td>1.468326</td>\n      <td>26.375792</td>\n      <td>94.647014</td>\n      <td>189.140271</td>\n      <td>115.439140</td>\n      <td>49.788462</td>\n      <td>4.070249</td>\n      <td>4.641411</td>\n      <td>91.260181</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>13.109028</td>\n      <td>0.499561</td>\n      <td>4.418122</td>\n      <td>13.831283</td>\n      <td>34.608052</td>\n      <td>30.413081</td>\n      <td>12.934202</td>\n      <td>1.290450</td>\n      <td>0.522391</td>\n      <td>11.496335</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>19.000000</td>\n      <td>1.000000</td>\n      <td>18.000000</td>\n      <td>62.000000</td>\n      <td>97.000000</td>\n      <td>41.600000</td>\n      <td>22.000000</td>\n      <td>2.000000</td>\n      <td>3.258100</td>\n      <td>58.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>38.250000</td>\n      <td>1.000000</td>\n      <td>23.200000</td>\n      <td>84.000000</td>\n      <td>164.250000</td>\n      <td>96.050000</td>\n      <td>40.250000</td>\n      <td>3.000000</td>\n      <td>4.276700</td>\n      <td>83.250000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>50.000000</td>\n      <td>1.000000</td>\n      <td>25.700000</td>\n      <td>93.000000</td>\n      <td>186.000000</td>\n      <td>113.000000</td>\n      <td>48.000000</td>\n      <td>4.000000</td>\n      <td>4.620050</td>\n      <td>91.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>59.000000</td>\n      <td>2.000000</td>\n      <td>29.275000</td>\n      <td>105.000000</td>\n      <td>209.750000</td>\n      <td>134.500000</td>\n      <td>57.750000</td>\n      <td>5.000000</td>\n      <td>4.997200</td>\n      <td>98.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>79.000000</td>\n      <td>2.000000</td>\n      <td>42.200000</td>\n      <td>133.000000</td>\n      <td>301.000000</td>\n      <td>242.400000</td>\n      <td>99.000000</td>\n      <td>9.090000</td>\n      <td>6.107000</td>\n      <td>124.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 5,
      "metadata": {
        "collapsed": false,
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "outputExpanded": false,
        "gather": {
          "logged": 1605478200994
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Train a model on Notebooks"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import Ridge\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.externals import joblib\n",
        "import math\n",
        "\n",
        "alphas = [0.1, 2, 0.3, 4, 0.5, 6, 0.7, 8, 0.9, 1.0]\n",
        "\n",
        "for alpha in alphas:\n",
        "    run = experiment.start_logging()\n",
        "    run.log(\"alpha_value\", alpha)\n",
        "    print(\"alpha_value\", alpha )\n",
        "    run = experiment.start_logging()\n",
        "    model = Ridge(alpha=alpha)\n",
        "    model.fit(X=X_train, y=y_train)\n",
        "    y_pred = model.predict(X=X_test)\n",
        "    rmse = math.sqrt(mean_squared_error(y_true=y_test, y_pred=y_pred))\n",
        "    # run.log(\"rmse\", rmse)\n",
        "    print(\"rmse\", rmse)\n",
        "    \n",
        "    model_name = \"model_alpha_\" + str(alpha) + \".pkl\"\n",
        "    filename = \"outputs/\" + model_name\n",
        "    \n",
        "    joblib.dump(value=model, filename=filename)\n",
        "    \n",
        "    run.upload_file(name=model_name, path_or_stream=filename)\n",
        "    run.complete()\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/anaconda/envs/azureml_py36/lib/python3.6/site-packages/sklearn/externals/joblib/__init__.py:15: FutureWarning: sklearn.externals.joblib is deprecated in 0.21 and will be removed in 0.23. Please import this functionality directly from joblib, which can be installed with: pip install joblib. If this warning is raised when loading pickled models, you may need to re-serialize those models with scikit-learn 0.21+.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "alpha_value 0.1\n",
            "rmse 56.60520331339142\n",
            "alpha_value 2\n",
            "rmse 56.73537363452705\n",
            "alpha_value 0.3\n",
            "rmse 56.61624324548363\n",
            "alpha_value 4\n",
            "rmse 56.89443476255977\n",
            "alpha_value 0.5\n",
            "rmse 56.628177342751364\n",
            "alpha_value 6\n",
            "rmse 57.0481879046065\n",
            "alpha_value 0.7\n",
            "rmse 56.64087521475942\n",
            "alpha_value 8\n",
            "rmse 57.18930922902951\n",
            "alpha_value 0.9\n",
            "rmse 56.654222996253125\n",
            "alpha_value 1.0\n",
            "rmse 56.66110898499054\n"
          ]
        }
      ],
      "execution_count": 6,
      "metadata": {
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "outputExpanded": false,
        "gather": {
          "logged": 1605478232707
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Go to Experiments Tab in the Azure ML Workspace Menu\n"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "authors": [
      {
        "name": "trbye"
      }
    ],
    "categories": [
      "tutorials"
    ],
    "collaboration": {
      "seqNumber": 294
    },
    "kernel_info": {
      "name": "python3-azureml"
    },
    "kernelspec": {
      "name": "python3-azureml",
      "language": "python",
      "display_name": "Python 3.6 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "msauthor": "trbye",
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}